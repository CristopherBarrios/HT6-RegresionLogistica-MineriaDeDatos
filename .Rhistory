#Comentario
mtcars
mtcars
#Para pedir ayuda, me aparece en la ventana de help
?mtcars
?str
datos["Valiant",]
#Comentario
mtcars
datos["Valiant",]
datos["valiant",]
#Variable
datos <- mtcars
str(datos)
datos["Valiant",]
datos[c(4,5,6),]
datos[c(4,5,6),"mpg"]
?aggreegate
?aggregate
?complete.cases()
knitr::opts_chunk$set(echo = TRUE)
plot(hc) #Genera el dendograma
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el número de clusters óptimo
library(factoextra) #Para hacer gráficos bonitos de clustering
library(tidyverse)
library(ppclust)
movies <- read.csv("tmdb-movies.csv")
moviesCuanti <- select(movies, popularity, budget, revenue, runtime, vote_average, release_year)
moviesCuantiCompleto <- moviesCuanti[complete.cases(moviesCuanti),]
wss <- (nrow(moviesCuantiCompleto)-1)*sum(apply(moviesCuantiCompleto,2,var))
for (i in 2:25)
wss[i] <- sum(kmeans(moviesCuantiCompleto, centers=i)$withinss)
plot(1:25, wss, type="b", xlab="Cantidad de Clusters",  ylab="Cantidad de suma de cuadrados")
noClusters <- 4
km<-kmeans(moviesCuantiCompleto,noClusters,iter.max =100)
movies$grupo<-km$cluster
plotcluster(moviesCuantiCompleto,km$cluster) #grafica la ubicaciÃ³n de los clusters
g1 <- movies[movies$grupo==1,]
summary(g1)
fcm<-cmeans(moviesCuantiCompleto,noClusters)
movies$FCGrupos<-fcm$cluster
movies<-cbind(movies,fcm$membership)
plotcluster(moviesCuantiCompleto, fcm$cluster)
fcm<-cmeans(moviesCuantiCompleto,noClusters)
movies$FCGrupos<-fcm$cluster
movies<-cbind(movies,fcm$membership)
plotcluster(moviesCuantiCompleto, fcm$cluster)
plotcluster(moviesCuantiCompleto,fcm$cluster)
?plotcluster
?plotcluster
plotcluster(moviesCuantiCompleto,fcm$cluster)
plotcluster(movies,fcm$cluster)
moviesCuantiCompleto<-cbind(movies,fcm$membership)
plotcluster(moviesCuantiCompleto,fcm$cluster)
fcm<-cmeans(moviesCuantiCompleto,noClusters)
movies$FCGrupos<-fcm$cluster
moviesCuantiCompleto<-cbind(movies,fcm$membership)
plotcluster(moviesCuantiCompleto,fcm$cluster)
moviesCuantiCompleto <- moviesCuanti[complete.cases(moviesCuanti),]
fcm<-cmeans(moviesCuantiCompleto,noClusters)
movies$FCGrupos<-fcm$cluster
moviesCuantiCompleto<-cbind(movies,fcm$membership)
plotcluster(moviesCuantiCompleto,fcm$cluster)
movies<-cbind(movies,fcm$membership)
plotcluster(movies,fcm$cluster)
install.packages("ppclust")
install.packages("ppclust")
install.packages("ppclust")
knitr::opts_chunk$set(echo = TRUE)
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el número de clusters óptimo
library(factoextra) #Para hacer gráficos bonitos de clustering
library(tidyverse)
library(ppclust)
movies <- read.csv("tmdb-movies.csv")
moviesCuanti <- select(movies, popularity, budget, revenue, runtime, vote_average, release_year)
moviesCuantiCompleto <- moviesCuanti[complete.cases(moviesCuanti),]
wss <- (nrow(moviesCuantiCompleto)-1)*sum(apply(moviesCuantiCompleto,2,var))
for (i in 2:25)
wss[i] <- sum(kmeans(moviesCuantiCompleto, centers=i)$withinss)
plot(1:25, wss, type="b", xlab="Cantidad de Clusters",  ylab="Cantidad de suma de cuadrados")
noClusters <- 4
km<-kmeans(moviesCuantiCompleto,noClusters,iter.max =100)
movies$grupo<-km$cluster
plotcluster(moviesCuantiCompleto,km$cluster) #grafica la ubicaciÃ³n de los clusters
#Clustering jerÃ¡rquico
hc<-hclust(dist(iris[,1:4])) #Genera el clustering jerÃ¡rquico de los datos
library(ppclust)
hc<-hclust(dist(moviesCuantiCompleto)) #Genera el clustering jerÃ¡rquico de los datos
plot(hc) #Genera el dendograma
plot(hc) #Genera el dendograma
rect.hclust(hc,k=noClusters) #Dibuja el corte de los grupos en el grÃ¡fico
groups<-cutree(hc,k=noClusters) #corta el dendograma, determinando el grupo de cada fila
movies$gruposHC<-groups
knitr::opts_chunk$set(echo = TRUE)
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el número de clusters óptimo
library(factoextra) #Para hacer gráficos bonitos de clustering
library(tidyverse)
movies <- read.csv("tmdb-movies.csv")
moviesCuanti <- select(movies, popularity, budget, revenue, runtime, vote_average, release_year)
moviesCuantiCompleto <- moviesCuanti[complete.cases(moviesCuanti),]
wss <- (nrow(moviesCuantiCompleto)-1)*sum(apply(moviesCuantiCompleto,2,var))
for (i in 2:25)
wss[i] <- sum(kmeans(moviesCuantiCompleto, centers=i)$withinss)
plot(1:25, wss, type="b", xlab="Cantidad de Clusters",  ylab="Cantidad de suma de cuadrados")
noClusters <- 4
km<-kmeans(moviesCuantiCompleto,noClusters,iter.max =100)
movies$grupo <- km$cluster
plotcluster(moviesCuantiCompleto,km$cluster)
fcm<-cmeans(moviesCuantiCompleto,noClusters)
movies$FCGrupos<-fcm$cluster
movies<-cbind(movies,fcm$membership)
plotcluster(moviesCuanti,fcm$cluster)
mc<-Mclust(moviesCuantiCompleto,noClusters)
install.packages(cluster)
knitr::opts_chunk$set(echo = TRUE)
install.packages("cluster")
install.packages("e1071")
install.packages("mclust")
install.packages("fpc")
install.packages("NbClust")
install.packages("factoextra")
install.packages("tidyverse")
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el número de clusters óptimo
library(factoextra) #Para hacer gráficos bonitos de clustering
library(tidyverse)
movies <- read.csv("tmdb-movies.csv")
moviesCuanti <- select(movies, popularity, budget, revenue, runtime, vote_average, release_year)
moviesCuantiCompleto <- moviesCuanti[complete.cases(moviesCuanti),]
wss <- (nrow(moviesCuantiCompleto)-1)*sum(apply(moviesCuantiCompleto,2,var))
for (i in 2:25)
wss[i] <- sum(kmeans(moviesCuantiCompleto, centers=i)$withinss)
plot(1:25, wss, type="b", xlab="Cantidad de Clusters",  ylab="Cantidad de suma de cuadrados")
noClusters <- 4
km<-kmeans(moviesCuantiCompleto,noClusters,iter.max =100)
movies$grupo <- km$cluster
plotcluster(moviesCuantiCompleto,km$cluster)
fcm<-cmeans(moviesCuantiCompleto,noClusters)
movies$FCGrupos<-fcm$cluster
movies<-cbind(movies,fcm$membership)
plotcluster(moviesCuanti,fcm$cluster)
mc<-Mclust(moviesCuantiCompleto,noClusters)
setwd("C:/Users/josue/Desktop/MINERIA DE DATOS/HOJA DE TRABAJO 6")
install.packages("caret")
install.packages("dummies")
casas <- read.csv("./data/train.csv")
View(casas)
porcentaje <- 70/100
set.seed(314)
casas[is.na(casas)] <- 0
casas$Id <- NULL
casas$clasificacion <- ifelse(casas$SalePrice <= 251000, "Economica", ifelse(casas$SalePrice <= 538000, "Intermedia", ifelse(casas$SalePrice <= 755000, "Cara")))
casas <- casas[,c(4,12,17,34,38,46,62,67,81)]
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
install.packages("dummies")
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
library(dummies)
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
casas <- casas[,c(4,12,17,34,38,46,62,67,81)]
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
casas_economicas <- casas[casas$clasificacion=="Economica"]
library(dummies)
casas <- read.csv("./data/train.csv")
porcentaje <- 70/100
set.seed(314)
casas[is.na(casas)] <- 0
casas$Id <- NULL
casas$clasificacion <- ifelse(casas$SalePrice <= 251000, "Economica", ifelse(casas$SalePrice <= 538000, "Intermedia", ifelse(casas$SalePrice <= 755000, "Cara")))
View(casas)
casas <- casas[,c(4,12,17,34,38,46,62,67,81)]
View(casas)
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
casas_economicas <- casas[casas$clasificacion=="Economica"]
View(casas)
casas_economicas <- casas[casas$clasificacion=="Economica",]
casas_intermedias <- casas[casas$clasificacion=="Intermedia",]
casas_caras <- casas[casas$clasificacion=="Cara",]
train_nrow_economicas <- sample(nrow(casas_economicas), porcentaje*nrow(casas_economicas))
train_economicas <- casas_economicas[train_nrow_economicas,]
train_nrow_intermedias <- sample(nrow(casas_intermedias), porcentaje*nrow(casas_intermedias))
train_intermedias <- casas_intermedias[train_nrow_intermedias,]
train_nrow_caras <- sample(nrow(casas_caras), porcentaje*nrow(casas_caras))
train_caras <- casas_caras[train_nrow_caras,]
training <- rbind(train_economicas, train_intermedias, train_caras)
test <- casas[setdiff(rownames(casas), rownames(training)),]
table(training$clasificacion)
table(test$clasificacion)
modelo_economico <- glm(casasEconomica~., data = training[,c(1:8,11)], family = binomial(), maxit=100)
predEcon <- predict(modelo_economico, newdata=test[,1:8], type = "response")
prediccion_economica <- ifelse(predEcon>=0.5,1,0)
confusionMatrix(as.factor(test$casasEconomica),as.factor(prediccion_economica))
install.packages("rpart")
library(dummies)
library(caret)
library(rpart)
library(e1071)
library(rpart.plot)
casas <- read.csv("./data/train.csv")
porcentaje <- 70/100
set.seed(314)
casas[is.na(casas)] <- 0
casas$Id <- NULL
casas$clasificacion <- ifelse(casas$SalePrice <= 251000, "Economica", ifelse(casas$SalePrice <= 538000, "Intermedia", ifelse(casas$SalePrice <= 755000, "Cara")))
casas <- casas[,c(4,12,17,34,38,46,62,67,81)]
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
casas_economicas <- casas[casas$clasificacion=="Economica",]
casas_intermedias <- casas[casas$clasificacion=="Intermedia",]
casas_caras <- casas[casas$clasificacion=="Cara",]
train_nrow_economicas <- sample(nrow(casas_economicas), porcentaje*nrow(casas_economicas))
train_economicas <- casas_economicas[train_nrow_economicas,]
train_nrow_intermedias <- sample(nrow(casas_intermedias), porcentaje*nrow(casas_intermedias))
train_intermedias <- casas_intermedias[train_nrow_intermedias,]
train_nrow_caras <- sample(nrow(casas_caras), porcentaje*nrow(casas_caras))
train_caras <- casas_caras[train_nrow_caras,]
training <- rbind(train_economicas, train_intermedias, train_caras)
test <- casas[setdiff(rownames(casas), rownames(training)),]
table(training$clasificacion)
table(test$clasificacion)
modelo_economico <- glm(casasEconomica~., data = training[,c(1:8,11)], family = binomial(), maxit=100)
predEcon <- predict(modelo_economico, newdata=test[,1:8], type = "response")
prediccion_economica <- ifelse(predEcon>=0.5,1,0)
confusionMatrix(as.factor(test$casasEconomica),as.factor(prediccion_economica))
# Modelo intermedio
modelo_intermedio <- glm(casasIntermedia~., data=training[,c(1:8,11)], family = binomial(), maxit=100)
predInter <- predict(modelo_intermedio, newdata=test[,1:8], type = "response")
prediccion_intermedia <- ifelse(predInter>=0.5,1,0)
library(dummies)
library(caret)
library(rpart)
library(e1071)
library(rpart.plot)
casas <- read.csv("./data/train.csv")
porcentaje <- 70/100
set.seed(314)
casas[is.na(casas)] <- 0
casas$Id <- NULL
casas$clasificacion <- ifelse(casas$SalePrice <= 251000, "Economica", ifelse(casas$SalePrice <= 538000, "Intermedia", ifelse(casas$SalePrice <= 755000, "Cara")))
casas <- casas[,c(4,12,17,34,38,46,62,67,81)]
casas <- cbind(casas, dummy(casas$clasificacion, verbose=T))
casas_economicas <- casas[casas$clasificacion=="Economica",]
casas_intermedias <- casas[casas$clasificacion=="Intermedia",]
casas_caras <- casas[casas$clasificacion=="Cara",]
train_nrow_economicas <- sample(nrow(casas_economicas), porcentaje*nrow(casas_economicas))
train_economicas <- casas_economicas[train_nrow_economicas,]
train_nrow_intermedias <- sample(nrow(casas_intermedias), porcentaje*nrow(casas_intermedias))
train_intermedias <- casas_intermedias[train_nrow_intermedias,]
train_nrow_caras <- sample(nrow(casas_caras), porcentaje*nrow(casas_caras))
train_caras <- casas_caras[train_nrow_caras,]
training <- rbind(train_economicas, train_intermedias, train_caras)
test <- casas[setdiff(rownames(casas), rownames(training)),]
table(training$clasificacion)
table(test$clasificacion)
# Modelo economico
modelo_economico <- glm(casasEconomica~., data = training[,c(1:8,11)], family = binomial(), maxit=100)
predEcon <- predict(modelo_economico, newdata=test[,1:8], type = "response")
prediccion_economica <- ifelse(predEcon>=0.5,1,0)
confusionMatrix(as.factor(test$casasEconomica),as.factor(prediccion_economica))
# Modelo intermedio
modelo_intermedio <- glm(casasIntermedia~., data=training[,c(1:8,11)], family = binomial(), maxit=100)
View(test)
# Modelo economico
modelo_economico <- glm(casasEconomica~., data = training[,c(1:8,11)], family = binomial(), maxit=100)
predEcon <- predict(modelo_economico, newdata=test[,1:8], type = "response")
prediccion_economica <- ifelse(predEcon>=0.5,1,0)
confusionMatrix(as.factor(test$casasEconomica),as.factor(prediccion_economica))
# Modelo intermedio
modelo_intermedio <- glm(casasIntermedia~., data=training[,c(1:8,11)], family = binomial(), maxit=100)
# Modelo economico
modelo_economico <- glm(casasIntermedia~., data = training[,c(1:8,11)], family = binomial(), maxit=100)
# Modelo economico
modelo_economico <- glm(casasEconomica~., data = training[,c(1:8,11)], family = binomial(), maxit=100)
